You are free to put any comments here.
The reading of the file starts from the line containing starting pattern
consisting of two $ signs.

After the starting pattern the file is build as follows:
/* comments line */
Offset Data
/* comments line */ 
Offset Data
/* comments line */ 
Offset Data

Note: comments line starts with /* and finish with */  and it should 
have at least one blank for example before the final */

--***********************************************************************
--                           Legenda registri
--***********************************************************************
--  dac_0         indirizzo   X"0000" segnale:  VREF_AMPLI
--  dac_1         indirizzo   X"0002" segnale:  CURR_GEN_PIXEL_1V2
--  dac_2         indirizzo   X"0004" segnale:  VTHR1_1V2
--  dac_3         indirizzo   X"0006" segnale:  CURR_GEN_PIXEL_SPARSE_2V5
--  dac_4         indirizzo   X"0008" segnale:  VCCPIX_2V5
--  dac_5         indirizzo   X"000A" segnale:  VMKR_1V2
--  dac_6         indirizzo   X"000C" segnale:  VTHR2_1V2
--  dac_7         indirizzo   X"000E" segnale:  VBIAS_PIX_2V5
--  dac_8         indirizzo   X"0010" segnale:  CURR_GEN_PIXEL_2V5
--  dac_9         indirizzo   X"0012" segnale:  VCCPIX_1V2
--  dac_A         indirizzo   X"0014" segnale:  VBIAS_AZ_1V2
--  dac_B         indirizzo   X"0016" segnale:  VBIAS_DIFF_1V2
--  dac_C         indirizzo   X"0018" segnale:  VMKR_2V5
--  dac_D         indirizzo   X"001A" segnale:  VRST_BIAS_1V2
--  dac_E         indirizzo   X"001C" segnale:  VREF_AMPLI_SPARSE
--  dac_F         indirizzo   X"001E" segnale:  VRST_PIX_1V2

--  riga iniziale reg            indirizzo   X"0020"      bit 6->0
--  colonna iniziale reg         indirizzo   X"0022"      bit 6->0
--  numero righe reg             indirizzo   X"0024"      bit 6->0
--  numero colonne reg           indirizzo   X"0026"      bit 6->0
--  numero righe reset reg       indirizzo   X"0028"      bit 6->0
--  numero reset cycle reg       indirizzo   X"002A"      bit 7->0
--  divisore clock reg           indirizzo   X"002C"      bit 7->0
--  numero frame reg             indirizzo   X"002E"      bit 7->0

--  start dac programming reg    indirizzo   X"0030"      bit 7->0

--  ****************************************************************************
--  working_mode_reg    indirizzo   X"0032"
--  ******************
--        bit  0        modo di operazione
--        bit  1        modo di operazione
--        bit  2        modo di operazione
--        bit  3        modo di operazione
--        bit  4        RESERVED
--        bit  5        abilita letture infinite
--        bit  6        abilita sequenza di reset
--        bit  7        clock da usare
--        bit  8        clock da usare
--	  bit  9	abilita trigger mode
--        bit  9-15     -   
--
--    	Definizione dei 16 modi di operazione possibili definiti dai 4 bit (3->0) del 
--   	registro working_mode_reg.
--    0	debug mode.    	Tutti i 32 segnali digitali sono prodotti dai bit
--			dei 3 registri:	no_sparse_reg, sparse_reg, address_reg.
--    1	dac mode       	I 3 segnali dei dac sono prodotti dalla macchina a stati
--			relativi, mentre gli altri sono prodotti come sopra.
--    2	no_sparse mode	I segnali: dei dac, di indirizzo e no_sparse sono
--			prodotti dalle relative macchine a stati.
--    3	clock test	i 32 segnali sono una copia del segnale clk_matrix_scan
--			che puo' essere cambiato di frequenza con il registro
--			divisore_clk. Solo i segnali abilitati dai relativi bit
--			dei 3 registri sparse_reg, no_sparse_reg e address_reg
--			saranno alimentati dal clock mentre gli altri a zero.
-- 
--    letture infinite	significa che i cicli di lettura della/delle matrici sono
--			free runnig, se non abilitate il ciclo di lettura parte
--			su ext_start
--    sequenza di reset	significa che prima di ogni ciclo di lettura c'e' una
--			sequeunza di reset delle matrici (serve solo ai pixel 3T)
-- 
--	Definizione della sorgente del clock definiti dai 2 bit (8->7) del
--	registro working_mode_reg.
--    0    clock interno della FPGA	(40 MHz)
--    1    clock esterno dalla porta	G_DIN[1]
--    2    clock della SIS3300		D_DIN[4]    (programmabile max 105MHz)
--
--  ****************************************************************************
--  no_sparse_reg        indirizzo   X"0034"
--  ******************
--        bit  0        en_reset_no_sparse    (no_sparse matrix)
--        bit  1        en_riga_2v5            (no_sparse matrix)
--        bit  2        en_riga_1v2            (no_sparse matrix)
--        bit  3        en_colonna_20um        (no_sparse matrix)
--        bit  4        en_colonna_10um        (no_sparse matrix)
--        bit  5       
--        bit  6        
--        bit  7        
--        bit  8        dac_clk                (DAC signals)
--        bit  9        dac_datain            (DAC signals)
--        bit 10        dac_cs                (DAC signals)  -- logica negata
--        bit 11-15	-
--  ****************************************************************************
--  sparse_reg        indirizzo   X"0036"
--  ******************
--        bit     0        az_clk_1v2
--        bit     1        az_1v2
--        bit     2        master_cmp_rst_1v2
--        bit     3        cmp_rst_1v2
--        bit     4        compare
--        bit     5        en_reset_sparse
--        bit     6        sel2
--        bit     7        sel1
--        bit     8        vrst_sparse_1v2
--        bit     9        en_sparse
--        bit    10-15     -
--  ****************************************************************************
--  address_reg        indirizzo   X"0038"
--  ******************
--        bit  6->0    sel_colonna_p
--        bit 14->8    sel_riga_p
--  ****************************************************************************
--  mezzanines_IDCODE        indirizzo   X"003A"
--  ******************
--        bit  2->0    D_IDCODE1
--        bit  5->3    E_IDCODE
--        bit  8->6    F_IDCODE
--*************************************************************************** 
--
--  trigger_counter LSB      indirizzo       X"003C"
--  *******************
--        bit     15->0   num_ext_start(15..0)       Read/Write
--
--  trigger_counter MSB      indirizzo       X"003E"
--  *******************
--        bit     31->16  num_ext_start(31..16)      Read/Write
--
--********************************************************************************


$$
/*riga iniziale reg            indirizzo X"0020"   bit 6->0 */
0020 0
/*colonna iniziale reg         X"0022"   bit 6->0 */
0022 0
/*numero righe reg             X"0024"   bit 6->0 */
0024 40
/*numero colonne reg           X"0026"   bit 6->0 */
0026 40
/*numero righe reset reg       X"0028"   bit 6->0 */
0028 10
/*numero reset cycle reg       X"002A"   bit 7->0 (reset duration in clock cycles; 1cc=25ns => 1us=0x28)*/
002A 28
/*divisore clock reg           X"002C"   bit 7->0 (40MHz/0x28=1MHz,50h=80d->0.5MHz,C8h=200d->0.2MHz)*/
002C 28
/*numero frame reg             X"002E"   bit 7->0 */
002E 20
/*working_mode_reg  indirizzo X"0032" */
0032 262
/*no_sparse_reg  indirizzo  X"0034" */
0034 0
/*sparse_reg  indirizzo   X"0036" */
0036 0
/*address_reg indirizzo   X"0038" */
0038 00
/* DAC section: */
/* Note: to actually program this values write random to start dac programming register */
/* dac_0	indirizzo   X"0000" segnale:  VREF_AMPLI                (sect. A) */
0000 0100
/* dac_1	indirizzo   X"0002" segnale:  CURR_GEN_PIXEL_1V2        (sect. A) */
0002 0000
/* dac_2	indirizzo   X"0004" segnale:  VTHR1_1V2                 (sect. A) */
0004 0100
/* dac_3	indirizzo   X"0006" segnale:  CURR_GEN_PIXEL_SPARSE_2V5 (sect. A) */
0006 0100
/* dac_4	indirizzo   X"0008" segnale:  VCCPIX_2V5                (sect. B) */
0008 0100
/* dac_5	indirizzo   X"000A" segnale:  VMKR_1V2                  (sect. B) */
000A 0100
/* dac_6	indirizzo   X"000C" segnale:  VTHR2_1V2                 (sect. B) */
000C 0100
/* dac_7	indirizzo   X"000E" segnale:  VBIAS_PIX_2V5             (sect. B) */
000E 0100
/* dac_8	indirizzo   X"0010" segnale:  CURR_GEN_PIXEL_2V5        (sect. C) */
0010 0100
/* dac_9	indirizzo   X"0012" segnale:  VCCPIX_1V2                (sect. C) */
0012 0100
/* dac_A	indirizzo   X"0014" segnale:  VBIAS_AZ_1V2              (sect. C) */
0014 0100
/* dac_B	indirizzo   X"0016" segnale:  VBIAS_DIFF_1V2            (sect. C) */
0016 0100
/* dac_C	indirizzo   X"0018" segnale:  VMKR_2V5                  (sect. D) */
0018 0100
/* dac_D	indirizzo   X"001A" segnale:  VRST_BIAS_1V2             (sect. D) */
001A 0100
/* dac_E	indirizzo   X"001C" segnale:  VREF_AMPLI_SPARSE         (sect. D) */
001C 0100
/* dac_F	indirizzo   X"001E" segnale:  VRST_PIX_1V2              (sect. D) */
001E 0100
/* start dac programming reg    indirizzo   X"0030"      bit 7->0 */
0030 0
/* trigger counter register LSB */
003C 0
/* trigger counter register MSB */
003E 0
/* sel1-sel2 signals divisore */
0040 28
/* cmp_rst_1V2 sigal lenght */
0042 30
/* address fixed (row,column) for sparse test */
0044 11b
