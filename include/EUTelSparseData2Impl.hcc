/*
 *   This source code is part of the Eutelescope package of Marlin.
 *   You are free to use this source files for your own development as
 *   long as it stays in a public research context. You are not
 *   allowed to use it for commercial purpose. You must put this
 *   header with author names in all development based on this file.
 *
 */
#ifndef EUTELSPARSEDATA2IMPL_HCC
#define EUTELSPARSEDATA2IMPL_HCC

namespace eutelescope {


  //! Implementation of the EUTelescope sparse data structure.
  /*! Within the EUTelescope framework input data can be provided both
   *  in non zero suppressed mode, i.e. one ADC signal for each pixel
   *  in the detector irrespectively of the signal amplitude; or in
   *  the so called zero suppress data format. In this case, the DAQ
   *  output to the PC only the information concerning pixels having a
   *  signal above a certain (user defined) threshold. While the
   *  handling of NZS data can be easily done via a
   *  LCIO::TrackerRawDataImpl class, this is no more true for sparse
   *  data for the following reasons:
   *
   *  @li The output for pixels above threshold will be a float number
   *  because it will be already corrected for pedestal and common
   *  noise.
   *
   *  @li Not all pixels are present in the output, so it is
   *  meaningless to use a structure like the LCIO::TrackerRawDataImpl
   *  where the geometrical position of each pixel can be
   *  reconstructed using the pixel readout order.
   *
   *  @li For each pixel storing the analog signal is not enough. At
   *  least also the pixel address has to associated to the
   *  signal. Advanced studies would benefit from having also other
   *  information of the pixel, like the actual pedestal and noise
   *  values, the threshold used for the selection and, last but not
   *  least, the initial raw value.
   *
   *  For all these reasons the use of a standard TrackerRawData is
   *  impossible and another way out has to be found. A possibility
   *  would be to use a LCGenericObject containing all the needed
   *  information but this is adding a performance penalty. Another
   *  possibility is to use a TrackerData as container but within the
   *  adcValues vector instead of storing only the pixel signal also
   *  the pixel coordinates and other things can be stored in the
   *  following manner:
   *
   *  @code
   *  adcValues.push_back(pixelXCoord);
   *  adcValues.push_back(pixelYCoord);
   *  adcValues.push_back(pixelSignal);
   *  adcValues.push_back(spare); // to be properly encoded if needed.
   *  @endcode
   *
   *  For the time being the second possibility has been chosen mainly
   *  because the usage of a LCGenericObject is introducing some
   *  performance penalties.
   *
   *  To handle the complicated data structure behind this
   *  TrackerData, a specific helper class has been designed on
   *  purpose (eutelescope::EUTelSparsePixel).
   *
   *  An important feature added to this class is the possibility to
   *  return a list of neighbor pixels as a result of a clusterization
   *  process run on this sparse data.
   *
   *  This sparse data container differs from EUTelSparseDataImpl
   *  because it stores a local copy of all the pixels in the data
   *  sample. This allows sorting and vector operations resulting in a
   *  much more performing re-clustering algorithm. In fact, the same
   *  proximity algorithm has been implemented using a brute force in
   *  EUTelSparseDataImpl with ~60 lines of code, while here is done
   *  in approx 800 lines. See the plot below for a comparison of the
   *  clustering performances:
   *
   *  \image html clusteringPerfomance.png "Different algorithms performance"
   *
   *  @author Antonio Bulgheroni, INFN <mailto:antonio.bulgheroni@gmail.com>
   *  @version $Id: EUTelSparseData2Impl.hcc 2653 2013-05-30 15:38:20Z hperrey $
   */
  template<class PixelType>
  class EUTelSparseData2Impl {

  public:
    //! Default constructor
    EUTelSparseData2Impl(IMPL::TrackerDataImpl * data);
    /*
    //!Copy Constructor
    EUTelSparseData2Impl( const EUTelSparseData2Impl & z);

    //!Assignment Operator
    EUTelSparseData2Impl & operator=( const EUTelSparseData2Impl & z);
    */
    //! Destructor
    virtual ~EUTelSparseData2Impl() { /* NOOP */ ; }

    //! Add a sparse pixel
    /*! This method is used to add to the current TrackerDataImpl a
     *  new sparse pixel with all the pieces of information.
     */
    void addSparsePixel(PixelType * pixel);

    //! Looks for neighboring pixels over threshold
    /*! This is a very important method for this class since it is
     *  used to group together nearby pixels present in this
     *  TrackerDataImpl and return a list of pixel list. Each pixel
     *  list contains all pixels that can be grouped together to form
     *  a cluster candidate.
     *
     *  This step is initial step for clustering and it is base on the
     *  distance of two pixels. If this is below the threshold
     *  distance set by the user, than the two pixels are assumed to
     *  belong to the same cluster candidate. Remember that this
     *  distance is measure in pixel units and so two pixels sharing
     *  one side are 1 pixel far apart, while two pixels with a
     *  touching corner are <code>sqrt(2)</code> far apart. So,
     *  setting the minDistance to sqrt(2) is equivalent to ask
     *  "touching pixels".
     *
     *  @param minSignal This is the minimum signal a pixel has to
     *  have to be accepted a member of the cluster. If zero or
     *  negative, the cut is disabled.
     *
     *  @return A list of list with the pixel index that can form a
     *  cluster.
     */
    virtual std::list<std::list< unsigned int> > findNeighborPixels(double minSignal) const;

    //! Get one of the sparse pixel
    /*! This method is used to get one of the sparse pixel contained
     *  into the TrackerData.
     *
     *  @param index Index of the sparse pixel within the collection
     *  @param pixel A pointer to the output pixel
     *  @return A pointer to the output pixel same as @c pixel
     */
    PixelType *  getSparsePixelAt(unsigned int index, PixelType * pixel) const;

    PixelType *  getSparsePixelSortedAt(unsigned int index, PixelType * pixel) const;

    //! Get the number of sparse pixels in the collection
    /*! This utility can be used to know how many pixels are contained
     *  in the TrackerData.
     *
     *  @return the size of TrackerData measured in sparse
     *  pixels.
     */
    unsigned int size() const ;

    //! Expose the TrackerDataImpl to the public
    /*! This method is used to allow a direct and public access to the
     *  TrackerDataImpl used to collect all the sparse data
     *  information.
     *
     *  @return The TrackerDataImpl with all the sparse data.
     */
    IMPL::TrackerDataImpl * trackerData();

    //! Sort by position
    /*!
     */
    void sortByPosition() const {
      streamlog_out_T ( DEBUG1 ) << "Sorting by position starting! " << std::endl;
      sort( _pixelVec.begin(), _pixelVec.end(), EUTelBaseSparsePixel::IsBefore<PixelType>() );
      _isPositionSorted = true;
      _isSignalSorted   = false;
      _isOriginalOrder  = false;
      streamlog_out_T ( DEBUG1 ) << "Sorting by position done! " << std::endl;
    }

    //! Sort by signal
    /*!
     */
    void sortBySignal() const {
      sort( _pixelVec.begin(), _pixelVec.end(), EUTelBaseSparsePixel::GreaterSignal<PixelType>() );
      _isPositionSorted = false;
      _isSignalSorted   = true;
      _isOriginalOrder  = false;
    }

    void fillPixelVec();

  private:
    //! This is the TrackerDataImpl
    /*! This is the object where the sparse data information are
     *  collected all together.
     */
    IMPL::TrackerDataImpl * _trackerData;

    //! Number of elements in the sparse pixel
    /*! This value is initialized in the constructor and taken from
     *  the template class.
     */
    unsigned int _nElement;

    //! Sparse pixel type
    /*! This enumerator value is set in the constructor and taken from
     *  the template class.
     */
    SparsePixelType _type;

    //! Local copy of the pixels
    mutable std::vector<PixelType > _pixelVec;

    //! Position sorting boolean
    mutable bool _isPositionSorted;

    //! Signal sorting boolean
    mutable bool _isSignalSorted;

    //! Original order boolean
    mutable bool _isOriginalOrder;

  };
 

  //! Template specialization
  /*! A template specialization is definitely needed for the
   *  getSparsePixelAt method, because depending on how the sparsified
   *  pixel data are organized in the TrackerData a re-arrangement is
   *  needed.
   *
   *  @param index The pixel index the user wants to retrieve.
   *  @param pixel A pointer to the output pixel
   *  @return A pointer to the output pixel same as @c pixel.
   */
  template<>
  inline EUTelSimpleSparsePixel *  EUTelSparseData2Impl<EUTelSimpleSparsePixel>::getSparsePixelAt(unsigned int index,
												  EUTelSimpleSparsePixel * pixel ) const {

    if ( index * _nElement + 2 > _trackerData->getChargeValues().size() ) return 0x0;
    pixel->setXCoord( static_cast<int> ( _trackerData->getChargeValues()[index * _nElement]     ) );
    pixel->setYCoord( static_cast<int> ( _trackerData->getChargeValues()[index * _nElement + 1] ) );
    pixel->setSignal( static_cast<int> ( _trackerData->getChargeValues()[index * _nElement + 2] ) );

    return pixel;
  }

  template<>
  inline EUTelSimpleSparsePixel * 
  EUTelSparseData2Impl<EUTelSimpleSparsePixel>::getSparsePixelSortedAt(unsigned int index,  EUTelSimpleSparsePixel * pixel ) const {

    if ( ! _isPositionSorted ) sortByPosition();
    if ( index >= _pixelVec.size() ) return 0x0;
    pixel->setXCoord( static_cast<int> ( _pixelVec[index].getXCoord() ));
    pixel->setYCoord( static_cast<int> ( _pixelVec[index].getYCoord() ));
    pixel->setSignal( static_cast<int> ( _pixelVec[index].getSignal() ));
    return pixel;

  }

  //! Template specialization for the addSparsePixel method
  /*! The same consideration about getSparsePixelAt. Adding and
   *  retrieving pixel information are sensitive to the pixel
   *  definition.
   */
  template<>
  inline void EUTelSparseData2Impl< EUTelSimpleSparsePixel>::addSparsePixel(EUTelSimpleSparsePixel * pixel) {

    _trackerData->chargeValues().push_back( static_cast<float> (pixel->getXCoord()) );
    _trackerData->chargeValues().push_back( static_cast<float> (pixel->getYCoord()) );
    _trackerData->chargeValues().push_back( static_cast<float> (pixel->getSignal()) );

    _pixelVec.push_back ( EUTelSimpleSparsePixel( static_cast< short >(pixel->getXCoord()), static_cast< short >(pixel->getYCoord()), static_cast< short >(pixel->getSignal()) ) );

  }

 //! Template specialization - APIX
  /*! A template specialization is definitely needed for the
   *  getSparsePixelAt method, because depending on how the sparsified
   *  pixel data are organized in the TrackerData a re-arrangement is
   *  needed.
   *
   *  @param index The pixel index the user wants to retrieve.
   *  @param pixel A pointer to the output pixel
   *  @return A pointer to the output pixel same as @c pixel.
   */ 
  template<>
  inline EUTelAPIXSparsePixel *  EUTelSparseData2Impl<EUTelAPIXSparsePixel>::getSparsePixelAt(unsigned int index,
												  EUTelAPIXSparsePixel * pixel ) const {

    if ( index * _nElement + 4 > _trackerData->getChargeValues().size() ) return 0x0;
    pixel->setXCoord( static_cast<int> ( _trackerData->getChargeValues()[index * _nElement]     ) );
    pixel->setYCoord( static_cast<int> ( _trackerData->getChargeValues()[index * _nElement + 1] ) );
    pixel->setSignal( static_cast<int> ( _trackerData->getChargeValues()[index * _nElement + 2] ) );
    pixel->setChip( static_cast<int> ( _trackerData->getChargeValues()[index * _nElement + 3] ) );
    pixel->setTime( static_cast<int> ( _trackerData->getChargeValues()[index * _nElement + 4] ) );

    return pixel;
  }

  template<>
  inline EUTelAPIXSparsePixel *
  EUTelSparseData2Impl<EUTelAPIXSparsePixel>::getSparsePixelSortedAt(unsigned int index,  EUTelAPIXSparsePixel * pixel ) const {

    if ( ! _isPositionSorted ) sortByPosition();
    if ( index >= _pixelVec.size() ) return 0x0;
    pixel->setXCoord( static_cast<int> ( _pixelVec[index].getXCoord() ));
    pixel->setYCoord( static_cast<int> ( _pixelVec[index].getYCoord() ));
    pixel->setSignal( static_cast<int> ( _pixelVec[index].getSignal() ));
    pixel->setChip( static_cast<int> ( _pixelVec[index].getChip() ));
    pixel->setTime( static_cast<int> ( _pixelVec[index].getTime() ));
    return pixel;

  }

  //! Template specialization for the addSparsePixel method
  /*! The same consideration about getSparsePixelAt. Adding and
   *  retrieving pixel information are sensitive to the pixel
   *  definition.
   */
  template<>
  inline void EUTelSparseData2Impl< EUTelAPIXSparsePixel>::addSparsePixel(EUTelAPIXSparsePixel * pixel) {

    _trackerData->chargeValues().push_back( static_cast<float> (pixel->getXCoord()) );
    _trackerData->chargeValues().push_back( static_cast<float> (pixel->getYCoord()) );
    _trackerData->chargeValues().push_back( static_cast<float> (pixel->getSignal()) );
    _trackerData->chargeValues().push_back( static_cast<float> (pixel->getChip()) );
    _trackerData->chargeValues().push_back( static_cast<float> (pixel->getTime()) );

    _pixelVec.push_back ( EUTelAPIXSparsePixel( static_cast< short >(pixel->getXCoord()), static_cast< short >(pixel->getYCoord()), static_cast< short >(pixel->getSignal()),  static_cast< short >(pixel->getChip()), static_cast< short >(pixel->getTime())) );

  }

	// fillPixelVec
	template<>
	inline void EUTelSparseData2Impl< EUTelSimpleSparsePixel>::fillPixelVec(){
		for ( unsigned int index = 0 ; index <  _trackerData->getChargeValues().size() ; index += 3 ) {
      	_pixelVec.push_back( EUTelSimpleSparsePixel( static_cast< short >(_trackerData->getChargeValues()[ index ]),
				      static_cast< short >(_trackerData->getChargeValues()[ index + 1 ]),
				      static_cast< short >(_trackerData->getChargeValues()[ index + 2 ]) ) );
    }
	}
	template<>
	inline void EUTelSparseData2Impl< EUTelAPIXSparsePixel>::fillPixelVec(){
		for ( unsigned int index = 0 ; index <  _trackerData->getChargeValues().size() ; index += 5 ) {
      	_pixelVec.push_back( EUTelAPIXSparsePixel( static_cast< short >(_trackerData->getChargeValues()[ index ]),
				      static_cast< short >(_trackerData->getChargeValues()[ index + 1 ]),
				      static_cast< short >(_trackerData->getChargeValues()[ index + 2 ]),
						static_cast< short >(_trackerData->getChargeValues()[ index + 3 ]),
						static_cast< short >(_trackerData->getChargeValues()[ index + 4 ])) );
    }
	}

}
#endif
