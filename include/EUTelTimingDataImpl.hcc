// Version: $Id: EUTelTimingDataImpl.hcc 2235 2013-01-14 14:57:29Z hperrey $
// -*- mode: c++; mode: auto-fill; mode: flyspell-prog; -*-
/*
 *   This source code is part of the Eutelescope package of Marlin.
 *   You are free to use this source files for your own development as
 *   long as it stays in a public research context. You are not
 *   allowed to use it for commercial purpose. You must put this
 *   header with author names in all development based on this file.
 *
 */
#ifndef EUTELTIMINGDATAIMPL_HCC
#define EUTELTIMINGDATAIMPL_HCC

namespace eutelescope {


   /*  
	// Author:  Georg Troska <mailto:georg.troska@uni-dortmund.de>
  
   */  
  template<class DetectorType>
  class EUTelTimingDataImpl {

  public:
    //! Default constructor
    EUTelTimingDataImpl(IMPL::TrackerDataImpl * data);
   
    //! Destructor
    virtual ~EUTelTimingDataImpl() { /* NOOP */ ; }
    
   
    void addTiming(DetectorType * detector);
    
    DetectorType *  getTimingAt( DetectorType * detector, unsigned int index = 0) const;
    
    //! Get the number of planes in the collection
    /*! This utility can be used to know how many pixels are contained
     *  in the TrackerData.
     *
     *  @return the size of TrackerData measured in planes.
     */ 
    unsigned int size() const ;

    //! Expose the TrackerDataImpl to the public
    /*! This method is used to allow a direct and public access to the
     *  TrackerDataImpl used to collect all the sparse data
     *  information.
     *  
     *  @return The TrackerDataImpl with all the sparse data.
     */
    IMPL::TrackerDataImpl * trackerData(); 

  private:
    //! This is the TrackerDataImpl
    /*! This is the object where the sparse data information are
     *  collected all together.
     */
    IMPL::TrackerDataImpl * _trackerData;

    //! Number of elements in the sparse pixel
    /*! This value is initialized in the constructor and taken from
     *  the template class.
     */ 
    unsigned int _nElement;

    //! Sparse pixel type
    /*! This enumerator value is set in the constructor and taken from
     *  the template class.
     */
    EUTelDetectorType _type;

  };
 

  //! Template specialization
  /*! A template specialization is definitely needed for the
   *  getTimingAt method, because depending on how the sparsified
   *  pixel data are organized in the TrackerData a re-arrangement is
   *  needed. 
   *  In the current cases index does not make sense, as there is only one timing per trigger....but maybe a time later
   *
   *  @param index The pixel index the user wants to retrieve.
   *  @param pixel A pointer to the output pixel
   *  @return A pointer to the output pixel same as @c pixel.
   */ 
 
  template<>
  inline EUTelAPIXTiming *  EUTelTimingDataImpl<EUTelAPIXTiming>::getTimingAt( 
											     EUTelAPIXTiming * timing, unsigned int index) const {
    if ( index * _nElement + 4 > _trackerData->getChargeValues().size() ) return 0x0;
    timing->setSensorID( static_cast<int> ( _trackerData->getChargeValues()[index * _nElement]     ) );
    timing->setTLUCounter( static_cast<int> ( _trackerData->getChargeValues()[index * _nElement + 1] ) );
    timing->setTPLLCounter( static_cast<int> ( _trackerData->getChargeValues()[index * _nElement + 2] ) );
    timing->setRealtime( (static_cast<int> ( _trackerData->getChargeValues()[index * _nElement + 3] ))*1000000000 + (static_cast<int> ( 
_trackerData->getChargeValues()[index * _nElement + 4] )));
    return timing;
  }

  template<>
  inline void EUTelTimingDataImpl< EUTelAPIXTiming>::addTiming(EUTelAPIXTiming * timing) {
    
    _trackerData->chargeValues().push_back( static_cast<float> (timing->getSensorID()) );
    _trackerData->chargeValues().push_back( static_cast<float> (timing->getTLUCounter()) );
    _trackerData->chargeValues().push_back( static_cast<float> (timing->getTPLLCounter()) );
    uint32_t sec = timing->getRealtime()/1000000000;
    uint32_t ns = timing->getRealtime() - (sec * 1000000000);
    _trackerData->chargeValues().push_back( static_cast<float> (sec) );
    _trackerData->chargeValues().push_back( static_cast<float> (ns) );

  }  
  
    template<>
  inline EUTelM26Timing *  EUTelTimingDataImpl<EUTelM26Timing>::getTimingAt( 
											     EUTelM26Timing * timing, unsigned int index) const {
    if ( index * _nElement + 2 > _trackerData->getChargeValues().size() ) return 0x0;
    timing->setSensorID( static_cast<int> ( _trackerData->getChargeValues()[index * _nElement]     ) );
    timing->setTLUCounter( static_cast<int> ( _trackerData->getChargeValues()[index * _nElement + 1] ) );
    return timing;
  }

  template<>
  inline void EUTelTimingDataImpl< EUTelM26Timing>::addTiming(EUTelM26Timing * timing) {
    
    _trackerData->chargeValues().push_back( static_cast<float> (timing->getSensorID()) );
    _trackerData->chargeValues().push_back( static_cast<float> (timing->getTLUCounter()) );

  } 


  

}
#endif

